import React, { useState } from 'react';
import './self.css';
import { useNavigate } from 'react-router-dom';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../../firebase'; // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
import { Link } from 'react-router-dom';

const NewMoodAssessment = () => {
  const history = useNavigate();
  const [selectedMood, setSelectedMood] = useState('');
  const [isMoodModalOpen, setIsMoodModalOpen] = useState(true);

  // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const moods = [
    { id: 'relaxed', label: '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', emoji: 'üòå', score: 2 },
    { id: 'worried', label: '‡∏Å‡∏±‡∏á‡∏ß‡∏•', emoji: 'üòü', score: 3 },
    { id: 'happy', label: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', emoji: 'üòä', score: 1 },
    { id: 'sad', label: '‡πÄ‡∏®‡∏£‡πâ‡∏≤', emoji: 'üò¢', score: 4 },
    { id: 'angry', label: '‡πÇ‡∏Å‡∏£‡∏ò', emoji: 'üò†', score: 5 }
  ];

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô Firestore
  const saveToMoodHistory = async (data) => {
    try {
      await addDoc(collection(db, 'moodHistory'), data); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Collection "moodHistory"
      console.log('Mood saved successfully:', data);
    } catch (error) {
      console.error('Error saving mood data:', error);
    }
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
  const handleMoodSelection = (moodId) => {
    setSelectedMood(moodId);
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
  const confirmMoodSelection = async () => {
    if (selectedMood) {
      setIsMoodModalOpen(false);
      const currentMood = moods.find((mood) => mood.id === selectedMood);

      const moodAfterAssessment = {
        date: new Date().toISOString(),
        emoji: currentMood.emoji,
        label: currentMood.label,
        score: currentMood.score,
        type: 'afterAssessment', // ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      };

      await saveToMoodHistory(moodAfterAssessment);

      // Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ "mood-tracking"
      history.push('/mood-tracking');
    }
  };

  return (
    <div className="simulator-container">
      {isMoodModalOpen && (
        <div className="mood-modal-overlay">
          <div className="mood-modal">
            <h3 className="mood-selection-title">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?</h3>
            <div className="mood-selection">
              {moods.map((mood) => (
                <button
                  key={mood.id}
                  className={`mood-button ${selectedMood === mood.id ? 'selected' : ''}`}
                  onClick={() => handleMoodSelection(mood.id)}
                >
                  {mood.emoji} {mood.label}
                </button>
              ))}
            </div>
            <Link
        to="/mood-comparison" // The target route to navigate to
        className={`confirm-mood-btn ${!selectedMood ? 'disabled' : ''}`}
        onClick={confirmMoodSelection} // Execute the confirm function
      >
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
      </Link>
          </div>
        </div>
      )}
    </div>
  );
};

export default NewMoodAssessment;
