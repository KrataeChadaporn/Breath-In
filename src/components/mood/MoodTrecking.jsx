import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom'; // Use useNavigate instead of useHistory
import { collection, getDocs, deleteDoc, addDoc } from 'firebase/firestore';
import { db } from '../../firebase'; // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
import './mood.css';

const MoodTracking = () => {
  const [beforeMoodHistory, setBeforeMoodHistory] = useState([]); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
  const [afterMoodHistory, setAfterMoodHistory] = useState([]);  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
  const navigate = useNavigate(); // Use useNavigate hook

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
  useEffect(() => {
    const fetchMoods = async () => {
      const moodCollection = collection(db, 'moodHistory'); // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Collection
      const moodSnapshot = await getDocs(moodCollection); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
      const moodData = moodSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å snapshot

      // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
      const beforeMoods = moodData.filter(entry => entry.type === 'beforeAssessment');
      const afterMoods = moodData.filter(entry => entry.type === 'afterAssessment');

      setBeforeMoodHistory(beforeMoods); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state
      setAfterMoodHistory(afterMoods);
    };

    fetchMoods();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
  const saveAfterAssessmentMood = async (totalScore, selectedMood) => {
    let level = '';
    let emoji = '';
    let label = '';

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    if (totalScore === 0) {
      level = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤';
      emoji = 'üòä';
      label = '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç';
    } else if (totalScore <= 7) {
      level = '‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢';
      emoji = 'üòå';
      label = '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢';
    } else if (totalScore <= 13) {
      level = '‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
      emoji = 'üòü';
      label = '‡∏Å‡∏±‡∏á‡∏ß‡∏•';
    } else if (totalScore <= 19) {
      level = '‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏≤‡∏Å';
      emoji = 'üò¢';
      label = '‡πÄ‡∏®‡∏£‡πâ‡∏≤';
    } else {
      level = '‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á';
      emoji = 'üò†';
      label = '‡πÇ‡∏Å‡∏£‡∏ò';
    }

    const moodAfterAssessment = {
      date: new Date().toISOString(),
      emoji: emoji,
      label: label,
      score: totalScore,
      type: 'afterAssessment',
      level: level,
    };

    try {
      await addDoc(collection(db, 'moodHistory'), moodAfterAssessment); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
      console.log('Mood after assessment saved successfully');
    } catch (error) {
      console.error('Error saving mood after assessment:', error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
  const clearMoodHistory = async () => {
    try {
      const moodCollection = collection(db, 'moodHistory');
      const moodSnapshot = await getDocs(moodCollection);

      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô collection
      const deletePromises = moodSnapshot.docs.map(doc => deleteDoc(doc.ref));
      await Promise.all(deletePromises);

      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state
      setBeforeMoodHistory([]);
      setAfterMoodHistory([]);
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    }
  };

  return (
    <div className="mood-tracking">
      <h2>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</h2>

      <div className="button-row">
        <button className="mood-tracking-button" onClick={() => navigate('/mood-comparison')}>
          ‡∏î‡∏π‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        </button>
        <button className="clear-data-button" onClick={clearMoodHistory}>
          ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </button>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" */}
      <h3>‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</h3>
      <table className="mood-table">
        <thead>
          <tr>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
            <th>‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</th>
            <th>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤</th>
          </tr>
        </thead>
        <tbody>
          {beforeMoodHistory.length > 0 ? (
            beforeMoodHistory.map((entry, index) => {
              const date = new Date(entry.date);
              const formattedDate = date.toLocaleDateString('th-TH');
              const formattedTime = date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
              const depressionLevel = entry.level || 'N/A';
              return (
                <tr key={entry.id || index} className="mood-entry">
                  <td>{formattedDate}</td>
                  <td>{formattedTime}</td>
                  <td>
                    <span className="mood-emoji">{entry.emoji}</span>
                    {entry.label}
                  </td>
                  <td>{depressionLevel}</td>
                </tr>
              );
            })
          ) : (
            <tr><td colSpan="4" className="empty-message">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</td></tr>
          )}
        </tbody>
      </table>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" */}
      <h3>‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</h3>
      <table className="mood-table">
        <thead>
          <tr>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
            <th>‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</th>
          </tr>
        </thead>
        <tbody>
          {afterMoodHistory.length > 0 ? (
            afterMoodHistory.map((entry, index) => {
              const date = new Date(entry.date);
              const formattedDate = date.toLocaleDateString('th-TH');
              const formattedTime = date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
              return (
                <tr key={entry.id || index} className="mood-entry">
                  <td>{formattedDate}</td>
                  <td>{formattedTime}</td>
                  <td>
                    <span className="mood-emoji">{entry.emoji}</span>
                    {entry.label}
                  </td>
                </tr>
              );
            })
          ) : (
            <tr><td colSpan="3" className="empty-message">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</td></tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default MoodTracking;
